from aiogram import types, Dispatcher, filters
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from createBot import bot
import os
import openai
import keyboards
import DB
import secrets
import payment
from datetime import timedelta, date

openai.api_key = os.getenv('OPENAI_API')


class FSMClient(StatesGroup):
    reason = State()


async def command_support(message: types.Message):
    await bot.send_message(message.from_user.id, text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞', reply_markup=keyboards.sup_button)


async def about_support(message: types.Message):
    # if message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
    await FSMClient.reason.set()
    await bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é.')


async def send_reason(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['reason'] = message.text
    await bot.send_message(message.from_user.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')

    async with state.proxy() as data:
        await bot.send_message(chat_id=os.getenv('SUP_CHAT'), text=f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n–ü—Ä–∏—á–∏–Ω–∞: \"{data["reason"]}\"\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.first_name}\n–ê–π–¥–∏ —á–∞—Ç–∞: {message.from_user.id}', reply_markup=keyboards.sup_confirm_button)
    await state.finish()


async def delete_message_handler(callback_query):
    # –ü–æ–ª—É—á–∞–µ–º id —á–∞—Ç–∞ –∏ id —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback_query
    msg_id = callback_query.message.message_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=os.getenv('SUP_CHAT'), message_id=msg_id)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ñ–º–∏—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"
    await callback_query.answer()


async def message_handler(message: types.Message):
    day_of_purchase = DB.get_day_of_purchase(message.from_user.id)
    days = None
    if day_of_purchase is not None:
        days = date.today() - day_of_purchase

    if days is not None and days.days >= 30 :
        DB.end_of_sub(message.from_user.id)

    if 'Default' in DB.get_status(message.from_user.id):
        free_requests = DB.get_free_requests(message.from_user.id)
        if free_requests != 0:
            try:
                response = await openai.Completion.acreate(
                    engine="text-davinci-003",
                    prompt=message.text,
                    max_tokens=3000,
                    n=1,
                    stop=None,
                    top_p=1,
                    temperature=0.5,
                    frequency_penalty=0,
                    presence_penalty=0,
                )
                await message.answer(response.choices[0].text)
                DB.add_requests(message.from_user.id)
                await bot.send_message(message.from_user.id, f'<b>–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {free_requests - 1} –∑–∞–ø—Ä–æ—Å(-–∞)</b>', parse_mode="HTML")
                DB.change_free_requests(message.from_user.id, free_requests - 1)
            except Exception as ex:
                await bot.send_message(message.from_user.id, '<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>', parse_mode="HTML")
                print('(ERROR)', ex)
        elif free_requests == 0:
            await bot.send_message(message.from_user.id, '<b>‚ùå–û—à–∏–±–∫–∞!\n–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å"</b>', parse_mode="HTML")
    elif 'Admin' or 'Vip' in DB.get_status(message.from_user.id):
        # messages = message.text
        # messages.append({"role": "user", "content": message.text})
        try:
            response = await openai.Completion.acreate(
                engine="text-davinci-003",
                prompt=message.text,
                max_tokens=3000,
                n=1,
                stop=None,
                top_p=1,
                temperature=0.5,
                frequency_penalty=0,
                presence_penalty=0,
            )
            await message.answer(response.choices[0].text)
            DB.add_requests(message.from_user.id)
        except Exception as ex:
            await bot.send_message(message.from_user.id, '<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>', parse_mode="HTML")
            print('(ERROR)', ex)


async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞—á—É –∏–ª–∏ –∫–æ–¥</b>', reply_markup=keyboards.kb_client, parse_mode="HTML")
    DB.add_chat_id(message.from_user.id)


async def information_about_bot(message: types.Message):
    await bot.send_message(message.from_user.id, '‚ô¶ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b>\n<i>–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –µ–≥–æ.</i>\n\n‚ô¶ <b>–ß—Ç–æ –¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?</b>\n<i>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü.</i>', parse_mode="HTML")


async def user_profile(message: types.Message):
    day_of_purchase = DB.get_day_of_purchase(message.from_user.id)
    days = None
    if day_of_purchase is not None:
        days = date.today() - day_of_purchase

    if days is not None and days.days >= 30:
        DB.end_of_sub(message.from_user.id)

    if day_of_purchase is None:
        data = '  -  '
    else:
        data = day_of_purchase + timedelta(days=30)

    requests = DB.get_requests_client(message.from_user.id)
    status = DB.get_status(message.from_user.id)
    await bot.send_message(message.from_user.id, f'üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\nüë§<b>–ò–º—è</b>: {message.from_user.first_name}\nüî∏<b>–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:</b> {requests}\n\nüíé<b>–°—Ç–∞—Ç—É—Å</b>: {status}\n‚åõ<b>–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è</b>: {data}', reply_markup=keyboards.buy_button, parse_mode="HTML")


async def buy_vip(message: types.Message):
    if 'Default' in DB.get_status(message.from_user.id):
        secret_key = secrets.token_urlsafe()
        pay_link = payment.create_paylink(secret_key)
        DB.write_payment_token(message.from_user.id, secret_key)
        await bot.send_message(message.from_user.id, '<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> VIP\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 149‚ÇΩ\n<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 30 –¥–Ω–µ–π', reply_markup=keyboards.create_pay_button(pay_link), parse_mode="HTML")
    else:
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!')


async def check_payment(message: types.Message):
    secret_key = DB.get_temp_payment_token(message.from_user.id)
    payment_status = payment.check_pay_status(secret_key)
    if payment_status is not None and 'success' in payment_status:
        await bot.send_message(message.from_user.id, '‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!')
        DB.success_pay(message.from_user.id, date.today())
        DB.write_payment_token(message.from_user.id, 0)
    else:
        await bot.send_message(message.from_user.id, '‚ùå –í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏!')


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_message_handler(information_about_bot, filters.Text(startswith='‚Ñπ –ü–æ–º–æ—â—å'))
    dp.register_message_handler(user_profile, filters.Text(startswith='üë§ –ü—Ä–æ—Ñ–∏–ª—å'))
    dp.register_message_handler(command_support, filters.Text(startswith='‚ùó –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
    dp.register_callback_query_handler(about_support, lambda callback_query: callback_query.data == 'write_to_sup')
    dp.register_callback_query_handler(delete_message_handler, lambda callback_query: callback_query.data == 'remove')
    dp.register_callback_query_handler(check_payment, lambda callback_query: callback_query.data == 'check_payment')
    dp.register_callback_query_handler(buy_vip, lambda callback_query: callback_query.data == 'buy_vip')
    dp.register_message_handler(send_reason, state=FSMClient.reason)
    dp.register_message_handler(message_handler)